---
---
<script>
(function() {
    const e = document.querySelector("#scripts_json");

    var scripts_json = {};
    if (e && e.textContent) {
        scripts_json = JSON.parse(e.textContent)
    }

    var analyticsLoaded = false;
    var startTime = Date.now();

    // Функция для проверки значимого значения (строки или числа)
    function isNonEmptyValue(value) {
        if (value === undefined || value === null) return false;
        if (typeof value === 'string') return value.trim() !== "";
        if (typeof value === 'number') return value !== 0;
        return Boolean(value);
    }

    // Функция для проверки и запуска скриптов аналитики
    function runTrackingScript(config) {
        const {
            functionName,
            jsonKey,
            isProduction = true,
            validator = null,
            isArray = false
        } = config;
        
        // Проверка на production окружение, если требуется
        if (isProduction && process.env.NODE_ENV !== "production") return;
        
        // Проверка существования функции
        if (typeof window[functionName] !== 'function') return;
        
        // Получение данных из конфигурационного объекта
        const scriptConfig = scripts_json[jsonKey];
        
        // Проверка на существование конфигурации
        if (!scriptConfig) return;
        
        // Для массивов проверяем первый элемент
        if (isArray) {
            if (!Array.isArray(scriptConfig) || scriptConfig.length === 0) return;
            
            // Проверка на непустой ID в первом элементе массива
            if (validator) {
                if (!validator(scriptConfig)) return;
            } else {
                const id = scriptConfig[0].id;
                if (!isNonEmptyValue(id)) return;
            }
        } else {
            // Для строк проверяем на непустую строку
            if (typeof scriptConfig === 'string' && !isNonEmptyValue(scriptConfig)) return;
            
            // Для объектов используем кастомный валидатор
            if (validator && !validator(scriptConfig)) return;
        }
        
        // Запускаем функцию с соответствующими параметрами
        window[functionName](scriptConfig);
    }

    // Конфигурация для всех скриптов
    const trackingConfigs = [
        {
            functionName: 'runGTM',
            jsonKey: 'gtm'
        },
        {
            functionName: 'runMETRIKA',
            jsonKey: 'metrika',
            isProduction: false,
            isArray: true
        },
        {
            functionName: 'runGA4',
            jsonKey: 'ga4',
            isArray: true
        },
        {
            functionName: 'runRE',
            jsonKey: 're'
        },
        {
            functionName: 'runVK_RTRG',
            jsonKey: 'vk-rtrg',
            isArray: true
        },
        {
            functionName: 'runTOP_MAIL_RU',
            jsonKey: 'top.mail.ru',
            isArray: true
        },
        {
            functionName: 'runCALLTOUCH',
            jsonKey: 'calltouch',
            isProduction: false,
            validator: (config) => isNonEmptyValue(config.mod_id)
        },
        {
            functionName: 'runKONGET',
            jsonKey: 'konget'
        },
        {
            functionName: 'runSTREAMWOOD',
            jsonKey: 'streamwood',
            validator: (config) => isNonEmptyValue(config.swKey) && isNonEmptyValue(config.swDomainKey)
        },
        {
            functionName: 'runSMARTPOINT',
            jsonKey: 'smartpoint'
        },
        {
            functionName: 'runWIDGETS',
            jsonKey: 'widgets',
            isArray: true,
            validator: (config) => config.length > 0 && isNonEmptyValue(config[0])
        }
    ];

    function loadAnalyticsScripts() {
        // console.log("process.env.NODE_ENV", process.env.NODE_ENV);
        // console.log("loadAnalyticsScripts", (Date.now() - startTime), scripts_json);
        if (!analyticsLoaded) {
            analyticsLoaded = true;
            window.removeEventListener('scroll', loadAnalyticsScripts);
            document.removeEventListener('mousemove', loadAnalyticsScripts);

            // Запускаем все скрипты с проверками
            trackingConfigs.forEach(config => {
                try {
                    runTrackingScript(config);
                } catch (error) {
                    console.error(`Ошибка при запуске ${config.functionName}:`, error);
                }
            });
        }
    }

    function initializeEventListeners() {
        // console.log("initializeEventListeners", analyticsLoaded);
        window.addEventListener('scroll', loadAnalyticsScripts);
        document.addEventListener('mousemove', loadAnalyticsScripts);
    }

    // console.log("document.readyState", document.readyState);
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeEventListeners);
    } else {
        initializeEventListeners();
    }
})();
</script>
